#include "includes/arvore.h"
#include "includes/fila.h"
#include "includes/recipiente.h"

Fila * Arvore::fila = new Fila();
Lista * Arvore::referencia = new Lista();

int Arvore::inica_busca(ml size){
	delete(Arvore::fila);
	Arvore::fila = new Fila();

	Fila * auxiliar = new Fila();

	Recipiente * percorre = Arvore::referencia->get_primeiro()->get_prox();
	
	while(percorre != nullptr){

		int number = percorre->get_registro()->get_capacidade();
		auxiliar->insere(number, 1);
		percorre = percorre->get_prox();

	}

	return Arvore::busca(size, auxiliar);
}

int Arvore::busca(const ml size, Fila * nova){

	Fila * auxiliar = new Fila();

	while(!nova->vazia()){

		Recipiente * atual = nova->remove();

		const int deep = atual->get_deep() + 1;

		Recipiente * percorre = Arvore::referencia->get_primeiro()->get_prox();
		
		while(percorre != nullptr){

			int number = atual->get_registro()->get_capacidade() + percorre->get_registro()->get_capacidade();

			if(number == size) return deep;

			auxiliar->insere(number, deep);

			percorre = percorre->get_prox();
		}

		percorre = Arvore::referencia->get_primeiro()->get_prox();
		
		while(percorre != nullptr){

			int number = atual->get_registro()->get_capacidade() - percorre->get_registro()->get_capacidade();
			
			if(number == size) return deep;

			if(number > 0) auxiliar->insere(number, deep);
			
			percorre = percorre->get_prox();

		}

		delete(atual);

	}

	delete(nova);
	
	return Arvore::busca(size, auxiliar);


}

